#!/usr/bin/python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 Yves Junqueira (yves@cetico.org)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
from md5 import md5
from optparse import OptionParser
import getpass
import sys
from nwu_server.db.operation import *

parser = OptionParser()

#parser.add_option("update", type="string", nargs=1, dest="update",
#    help="Update APT cache in the computer.")
#parser.add_option("install", type="string", nargs=2, dest="install",
#    metavar="
#    help="Install 
VERSION = '0.1.5'

appendix = """NWU is a remote upgrades manager for systems that use APT.
For more information, see https://dev.ubuntubrasil.org/trac/nwu/
"""

sub_commands = {
"install" : "<computer> <packages>  : Install defined packages in the computer",
"help" : "                          : This help message",
"upgrade" : "<computer>             : Upgrade all packages in the computer",
"update"  : "<computer>             : Update packages list",
"list" : "   [group]                : Lists all computers or specified group",
"view" : "   <computer> <info>      : View computer informations",
"adduser" : "<name> <level:0|1>     : Add a new user, admin or not",
"addrep" : " <computer> <repository uri>  : Add new repository",
    }


def usage():
    print \
"""Usage: nwu <sub-command> <options> [arguments]
Command line manager for NWU, version """ + VERSION + """.

Available sub-commands:
"""

    cmds = sub_commands.keys()
    cmds.sort()
    for cmd in cmds:
        print "  " + cmd  + " " + sub_commands[cmd] 

    print """
Available groups for list command:

    outdated
"""

def is_safe(str, http=False):
    # FIXME: duplicated code. see nwu_agent/maint. candidate for nwu-common
    # From Byron Ellacot's message in the mod_python list
    # http://www.modpython.org/pipermail/mod_python/2004-December/016987.html

    OK_CHARS = "abcdefghijklmnopqrstuvwxyz0123456789.-_"

    # We can also selectively accept other chars

    if http:
        OK_CHARS += "/: "

    return [x for x in str if x.lower() not in OK_CHARS] == []

def main():
    hub = PackageHub()
    __connection__ = hub

    hub.begin()

    args = len(sys.argv)

    if args < 2 or sys.argv[1] not in sub_commands:

        print \
    """Type 'nwu help' for usage help

    NWU is a remote upgrades manager for apt-able systems.
    For more information, see https://dev.ubuntubrasil.org/trac/nwu/
    """ 

        sys.exit(64) # see /usr/include/sysexits.h

    sub_command = sys.argv[1]

    args = []

    if len(sys.argv) > 2:
        args = sys.argv[2:]

    if sub_command == 'help':
        usage()
        sys.exit(0)

    elif sub_command == 'adduser':
        if len(args) != 2:
            usage()
            sys.exit(0)
        elif is_safe(args[0]):
            if args[1] == '0' or args[1] == '1':
                p = getpass.getpass()
                name = args[0]
                level = args[1]
                password = md5(p).hexdigest()
                try:
                    u = users(username=name, userlevel=level,password=password)
                except:
                    print "Error adding user. Username duplicated?"
            else:
                usage()
        else:
            print """Username should consist of letters, digits, underscores
    periods and dashes.
    """
            

    elif sub_command == 'list':
        if len(args) == 0:
            m = computer.select()
            ma = list(m)
            for mach in ma:
                print mach.id, mach.hostname, mach.os_name, '"' + mach.uniq + '"'

        elif len(args) == 1:

            if args[0] == 'outdated':
		olds = {}
		for candidate in apt_update_candidates.select():
		    olds[candidate.computerID] = True
		for mach in computer.select():
		    if olds.has_key(mach.id):
			print mach.hostname + "[" + str(mach.id) + "]"
	    else:
                usage()
        else: usage()

    elif sub_command == 'view':

        if len(args) > 1:
            id = args[0]
            m = computer.select(computer.q.id==id)
            ma = list(m)
            for mach in ma:
                mach_print =  mach.hostname + "[" + id + "]"
                view_what = args[1]

                if view_what == 'packages':
                    print "Reading current packages in computer " + mach_print
                    for package in mach.apt_current_packageses:
                        fill = 45 - len(package.name)
                        fill_blank = " " * fill 
                        print package.name + fill_blank +  package.version

                elif view_what == 'update-candidates':
                    print "Reading update candidades for computer " + mach_print
                    for package in mach.apt_update_candidateses:
                        fill = 45 - len(package.name)
                        fill_blank = " " * fill 
                        print package.name  + fill_blank + package.version

                elif view_what == 'repositories':
                    print "Reading repositories for computer " + mach_print
                    for rep in mach.apt_repositorieses:
                        print rep.type + " " + rep.uri + " " + rep.distribution + \
                            " " + rep.components + "  (" + rep.filename + ")"

                elif view_what == 'tasks':
                    print "Reading tasks for computer " + mach_print
                    for t in mach.tasks:
                       print t.action + ": " + str(t.details)

                else: usage()

        elif len(args) == 1:
            print """Please choose an information to view:

    packages, repositories, update-candidates, tasks
    """

        else: usage() 

    elif sub_command == 'update' or sub_command == 'upgrade':

        if len(args) > 0:
            id = args[0]
            m = computer.select(computer.q.id==id)
            ma = list(m)
            for mach in ma:
                print "Found computer id=" + id + " in the database. Requesting\
 " + sub_command + "."
                t = task(computer=mach, action=sub_command)
        else:
            usage()
        
    elif sub_command == 'install' or sub_command == 'addrep':
        if len(args) > 1:
            id = args[0]
            details = " ".join(args[1:])
            m = computer.select(computer.q.id==id)
            ma = list(m)
            for mach in ma:
               print "Found computer id=" + id + " in the database. Requesting\
 " + sub_command + " " + details + "."
               t = task(computer=mach, action=sub_command,details=details)

        else:
            usage()
    hub.commit()
    hub.end()
main()
