#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 Yves Junqueira (yves@cetico.org)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import sys
sys.path.append('/usr/local/share/nwud')
sys.path.append('/usr/share/nwud')
from nwu_server.db.operation import *

VERSION = '0.1.3'

appendix = """NWU is a remote upgrades manager for systems that use APT.
For more information, see https://dev.ubuntubrasil.org/trac/nwu/
"""

sub_commands = {
    "update" : " <node>             : Update APT cache in the node",
    "install" : "<node> <packages>  : Install defined packages in the node ",
    "help" : "                      : This help message",
    "upgrade" : "<node>             : Upgrade all packages in the node",
    "list" : "   [group]            : Lists all nodes or specified group",
    "view" : "   <node> <info>      : View node informations"
    }


def usage():
    print \
"""Usage: nwu <sub-command> <options> [arguments]
Command line manager for NWU, version """ + VERSION + """.

Available sub-commands:
"""
    cmds = sub_commands.keys()
    cmds.sort()
    for cmd in cmds:
        print "  " + cmd  + " " + sub_commands[cmd] 

    print """
Available groups for list command:

    outdated
""" 
args = len(sys.argv)

if args < 2 or sys.argv[1] not in sub_commands:
    print \
"""Type 'nwu help' for usage help

NWU is a remote upgrades manager for apt-able systems.
For more information, see https://dev.ubuntubrasil.org/trac/nwu/
""" 
    sys.exit(64) # see /usr/include/sysexits.h

sub_command = sys.argv[1]

args = []

if len(sys.argv) > 2:
    args = sys.argv[2:]

if sub_command == 'help':
    usage()
    sys.exit(0)

elif sub_command == 'list':
    if len(args) == 0:
        m = machine.select()
        ma = list(m)
        for mach in ma:
            print mach.id, mach.hostname, mach.os_name, '"' + mach.uniq + '"'

    elif len(args) == 1:

        if args[0] == 'outdated':
            sel = conn.sqlrepr(Select((machine.q.id, machine.q.hostname),\
               groupBy = machine.q.id, orderBy=machine.q.hostname))
            outd = list(conn.queryAll(sel))
            for (id, host) in outd:
                print host + "[" + str(id) + "]"
        else:
            usage()
    else: usage()

elif sub_command == 'view':

    if len(args) > 1:
        id = args[0]
        m = machine.select(machine.q.id==id)
        ma = list(m)
        for mach in ma:
            mach_print =  mach.hostname + "[" + id + "]"
            view_what = args[1]

            if view_what == 'packages':
                print "Reading current packages in machine " + mach_print
                for package in mach.apt_current_packageses:
                    fill = 45 - len(package.name)
                    fill_blank = " " * fill 
                    print package.name + fill_blank +  package.version

            elif view_what == 'update-candidates':
                print "Reading update candidades for machine " + mach_print
                for package in mach.apt_update_candidateses:
                    fill = 45 - len(package.name)
                    fill_blank = " " * fill 
                    print package.name  + fill_blank + package.version

            elif view_what == 'repositories':
                print "Reading repositories for machine " + mach_print
                for rep in mach.apt_repositorieses:
                    print rep.type + " " + rep.uri + " " + rep.distribution + \
                        " " + rep.components + "  (" + rep.filename + ")"

            elif view_what == 'tasks':
                print "Reading tasks for machine " + mach_print
                for task in mach.tasks:
                   print task.action + ": " + task.details

            else: usage()

    elif len(args) == 1:
        print """Please choose an information to view:

packages, repositories, update-candidates, tasks
"""

    else: usage() 

elif sub_command == 'update' or sub_command == 'upgrade':

    if len(args) > 0:
        id = args[0]
        m = machine.select(machine.q.id==id)
        ma = list(m)
        for mach in ma:
            #print "Found machine id=" + id + " in the database. Requesting " + sub_command + "."
            t = task(machine=mach, action=sub_command)
    else:
        usage()
    
elif sub_command == 'install':
    if len(args) > 1:
        id = args[0]
        pkgs = args[1:]
        m = machine.select(machine.q.id==id)
        ma = list(m)
        for mach in ma:
   #         print "Found machine id=" + id + " in the database. Requesting pacakge installation."
            t = task(machine=mach, action='install',details=pkgs)
    else:
        usage()
