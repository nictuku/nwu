Nwu-server installation
-----------------------
- Yves Junqueira <yves@cetico.org>

--- SSL Certificate File ---

You must create a SSL certificate for the server. In the current version,
a self-signed certificate will do, but in later versions the agents
will require that the certificate is generated by a valid CA, in-house or not.

- Create a private key:

openssl genrsa -des3 -out server.key 1024

- Generate a Certificate Signing Request:

openssl req -new -key server.key -out server.csr

- Remove the passphrase from the key:

cp server.key server.key.org
openssl rsa -in server.key.org -out server.key

- Create a self-signed certificate:

openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

- Install the certificate and key files:

cp server.key /etc/nwu/server.pem
cat server.crt >> /etc/nwu/server.pem

chown nwuserver.nwuserver /etc/nwu/server.pem

chmod 660 /etc/nwu/server.pem

--- DATABASE ---

In order to use nwu-server you need a database backend compatible with python
sqlobject (MySQL, PostgreSQL, SQLite).

SQLite is nice and simple, but I've done tests with nwu and sqlite did not have
very good speed ratings, as expected from this kind of database. It's a very 
good option for testing and for networks with just a few nodes. Other than 
that, either PostgreSQL and MySQL are good options.

A) - MySQL -

Create database:

CREATE DATABASE nwu;

Create user:

GRANT ALL PRIVILEGES ON nwu.* TO 'nwu'@'%' IDENTIFIED BY 'YOURPASSWORD' WITH GRANT OPTION;

Create tables:

Don't worry. In the current version, nwu will try to create the tables in
every run. It's ugly, but it works.

B) - SQLite - 

Leave everything to nwu-server and it will create the database file in
/var/lib/nwu/nwu.db, with all required tables.

C) - PostgreSQL -

sudo -u postgres createuser nwu
sudo -u postgres createdb nwu
sudo -u postgres psql nwu << EOF
ALTER DATABASE nwu OWNER TO nwu
\q
EOF

--- Nwu-server config file ---

You have to configure nwu-server parameters in the /etc/nwu/server.conf file.
This file must only be readable by the nwuserver user, since it has sensitive
information like database user and password.

The webservice section defines in what address and port nwu-server will listen 
for connections from the clients.

In the database section you'll define database settings, but that is pretty
straightforward, as you can see in this sample config file.

Sample config file:

-----------------------
[webservice]

# The host your clients will connect to.
host = nictuku.dyndns.org
port = 8088

[database]
type = sqlite
host =
database = /var/lib/nwu/nwu.db
user =
password =

#type = mysql
#host = localhost
#database = nwu
#user = nwu
#password = PASSHERE
------------------------

--- Start the server ---

nwu-server comes with a init script.

The init calls nwu-server which dameonizes itself. It creates a pid file in 
/var/run/nwu-server/nwu-server.pid and goes to the background. Check the 
syslog to see if everything went fine.

--- Nwu admin CLI tool ---

In order to manage nwu, in the current version, the admin must be a member
of the nwuserver group, so he/she can read /etc/nwu/server.conf and use
that information to connect to the database.

adduser johndoe nwuserver

In later versions all management activities will use XML-RPC calls, so you will
will be able to use nwu admin tools (both CLI and PyGTK) from a remote machine.
