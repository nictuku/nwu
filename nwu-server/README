NWU

== NWU development version ==
=============================

Network wide updates for systems which use APT.
- Yves Junqueira <yves@cetico.org>

https://dev.ubuntubrasil.org/trac/nwu

NWU features
-------------

# Manage Debian-like systems in the network using a CLI tool 
  (PyGTK interface under development)
# Install packages in the remote computers
# List pending updates
# Roll security upgrades to computers
# Update the remote nodes packages cache

The nodes talks to the server using SSL+XML-RPC regularly, sending changes
in APT repositories, list of installed softwares and even pending updates.

All those information are stored in the server's database, which can be
either PostgreSQL, MySQL or SQLite, and the can be viewed using a CLI
tool or with a GTK tool, still in early development stages.

If the nwu operator wants so, he or she can trigger tasks to be executed
in the remote computers, like install packages, update the APT cache or
upgrade the system.

= NWU Server =
==============

NWU Server is used to control computers that have nwu agent installed. 

It must be configured to use a database system and have a SSL certificate
in place.

= Nwu-server installation =
===========================

SSL Certificate File
--------------------

You must create a SSL certificate for the server. In the current version,
a self-signed certificate will do, but in later versions the agents
will require the admin to define a certificate of a server it should trust. 

- Create a private key:

openssl genrsa -des3 -out server.key 1024

- Generate a Certificate Signing Request:

openssl req -new -key server.key -out server.csr

- Remove the passphrase from the key:

cp server.key server.key.org
openssl rsa -in server.key.org -out server.key

- Create a self-signed certificate:

openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

- Install the certificate and key files:

cp server.key /etc/nwu/server.pem
cat server.crt >> /etc/nwu/server.pem

chown nwuserver.nwuserver /etc/nwu/server.pem

chmod 660 /etc/nwu/server.pem

Database setup
--------------

In order to use nwu-server you need a database backend compatible with python
sqlobject (MySQL, PostgreSQL, SQLite).

SQLite is nice and simple, but I've done tests with nwu and sqlite did not have
very good speed ratings, as expected from this kind of database. It's a very 
good option for testing and for networks with just a few nodes. Other than 
that, either PostgreSQL and MySQL are good options.

A) - MySQL -

Create database:

CREATE DATABASE nwu;

Create user:

GRANT ALL PRIVILEGES ON nwu.* TO 'nwu'@'%' IDENTIFIED BY 'YOURPASSWORD' WITH GRANT OPTION;

Create tables:

# nwu-server -i

This command will create all required tables and then exit. Check the syslog
for problems.

B) - SQLite - 

Start nwu-server with the following command:

# nwu-server -i

It will create the database file in
/var/lib/nwu/nwu.db, with all required tables. Check the syslog for problems.

C) - PostgreSQL -

sudo -u postgres createuser nwu
sudo -u postgres createdb nwu
sudo -u postgres psql nwu << EOF
ALTER DATABASE nwu OWNER TO nwu
\q
EOF

To populate the tables:

# nwu-server -i

It will create all required tables and then exit. Check the syslog for 
possible problems.

Nwu-server config file
----------------------

You have to configure nwu-server parameters in the /etc/nwu/server.conf file.
This file must only be readable by the nwuserver user, since it has sensitive
information like database user and password.

The webservice section defines in what address and port nwu-server will listen 
for connections from the clients.

In the database section you'll define database settings, but that is pretty
straightforward, as you can see in this sample config file.

Sample config file:

-----------------------
[webservice]

host = 0.0.0.0
port = 8088

[database]
type = sqlite
host =
database = /var/lib/nwu/nwu.db
user =
password =

#type = mysql
#host = localhost
#database = nwu
#user = nwu
#password = PASSHERE
------------------------

Start the server
----------------

nwu-server comes with a init script.

The init calls nwu-server which daemonizes itself. It creates a pid file in 
/var/run/nwu-server/nwu-server.pid and goes to the background. Check the 
syslog to see if everything went fine.

nwu-server also has some command-line options. For example, to run it
in the foreground and see the logs in stderr, run it with the '-f'
parameter.

For more options, type:

# nwu-server -h

Nwu admin CLI tool
------------------

In order to manage nwu, in the current version, the admin must be a member
of the nwuserver group, so he/she can read /etc/nwu/server.conf and use
that information to connect to the database.

adduser johndoe nwuserver

In later versions all management activities will use XML-RPC calls, so you will
will be able to use nwu admin tools (both CLI and PyGTK) from a remote machine.


Troubleshooting
---------------

If nwu-server is behaving strangely, you can use the "-e" parameter to
redirect python errors what would be sent to /dev/null to a log file,
and then see what's happening. I hope this ugly feature will not be necessary
in later versions of NWU, and all logs would be sent either to syslog OR
to stdout.

Feedback
--------

Please send all feedback to yves@cetico.org 

The project bugs are managed in a trac, placed in
https://dev.ubuntubrasil.org/trac/nwu

Please file any bugs there.

Thank you,

Yves Junqueira
<yves@cetico.org>
