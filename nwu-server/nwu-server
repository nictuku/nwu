#!/usr/bin/python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 Yves Junqueira (yves@cetico.org)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import sys
import pwd
import ConfigParser
from nwu_server.db.operation import *
from nwu_server.rpc_admin import nwu_admin
from nwu_server import apt, auth, sslxmlrpc
import logging
import logging.handlers

log = logging.getLogger()

hdlr = logging.handlers.SysLogHandler(
  "/dev/log",facility=logging.handlers.SysLogHandler.LOG_DAEMON)
  
formatter = logging.Formatter(
"nwu_server[%(process)d] %(levelname)s %(message)s"
    )
hdlr.setFormatter(formatter)
log.addHandler(hdlr)
log.setLevel(logging.INFO)

DAEMONIZE = 1 

def read_config():
    """Reads configuration data from the config file.
    """
    config_p = ConfigParser.ConfigParser()
    config_p.read("/etc/nwu/server.conf")

    host = config_p.get("webservice", "host")
    port = int(config_p.get("webservice", "port"))
    config = { 'host' : host, 'port' : port }
    return config

def add_computer(password, uniq, hostname, os_name, os_version):
    """Adds the given computer to the computers database.
    """
    log.info("Creating computer " + uniq + " " + hostname + " " +\
         os_name + " " + os_version)
    m = computer(uniq=uniq,hostname=hostname, os_name=os_name,
        os_version=os_version,password=password)
    return True

def session_setup(uniq, token):
    """Setups the session for agent-aggregator or agent-manager communication.
    
    The token string comes from the authentication process.

    Returns session object to be used by the agent in later
    communcation steps.
    """

    log.info("Setting session for computer " + uniq + ".")
  
    # FIXME: test if token is valid here.
    query_check_m = computer.select(computer.q.uniq==uniq)
    check_m = list(query_check_m)
    
    password = ''

    if len(check_m) == 0:
        return False

    if auth.check_token(uniq, token):
        return uniq, token

    # FIXME: return False or raise an exception?
    raise Exception, "Wrong token for " + uniq

def get_tasks(session):

    (uniq, token) = session

    if not auth.check_token(uniq, token):
        raise Exception, "Invalid authentication token"

    m = computer.select(computer.q.uniq==uniq)
    ma = list(m)
    q = len(ma)
    if q != 1:
        raise Exception, "Strange. There are more then 1 computer with uniq string =" + uniq
    
    client_computer = ma[0]

    log.info("Checking pending tasks for " + client_computer.hostname + \
       '(' + str(client_computer.id) + ')'  )

    remote_tasks = []
#    task._connection.debug = True    
    t = task.select(task.q.computerID==client_computer.id)
    ta = list(t)
    qta = len(ta)

    if qta == 0:
        log.info("No pending tasks found for "  + client_computer.hostname + \
	   '(' + str(client_computer.id) + ')' )
        return remote_tasks
        
    for tas in ta:
        if tas.action is None: tas.action = ''
        if tas.details is None: tas.details = ''
	log.info("Task found for "  + client_computer.hostname +  \
         '(' + str(client_computer.id) + '): ' + tas.action + ' ' + tas.details)
        remote_tasks.append((tas.action, tas.details))

    return remote_tasks

def wipe_tasks(session):
    (uniq, token) = session

    if not auth.check_token(uniq, token):
        raise Exception, "Invalid authentication token"

    m = computer.select(computer.q.uniq==uniq)
    ma = list(m)
    q = len(ma)
    if q != 1:
        raise Exception, "Strange. There are " +  q +  " computer(s) with'" \
        + uniq + "'uniq string and it should have exactly one."

    client_computer = ma[0]

    log.info("Wiping tasks for "   + client_computer.hostname + '(' + \
        str(client_computer.id) + ')' )


    delquery = conn.sqlrepr(Delete(task.q, where=\
        (task.q.computerID ==  client_computer.id)))

    conn.query(delquery)

    return True

def daemonize():

        # Credits:
        # http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012
        PIDFILE = '/var/run/nwu-server/nwu-server.pid'
        # do the UNIX double-fork magic, see Stevens' "Advanced
        # Programming in the UNIX Environment" for details (ISBN 0201563177)
        try:
            pid = os.fork()
            if pid > 0:
                # exit first parent
                sys.exit(0)
        except OSError, e:
            print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, \
                e.strerror)
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/")   #don't prevent unmounting....
        os.setsid()
        os.umask(0)

        dev_null = file('/dev/null', 'a+')
        os.dup2(dev_null.fileno(), sys.stdout.fileno())
        os.dup2(dev_null.fileno(), sys.stderr.fileno())
        os.dup2(dev_null.fileno(), sys.stdin.fileno())

        # do second fork
        try:
            pid = os.fork()
            if pid > 0:
                # exit from second parent, print eventual PID before
                #print "Daemon PID %d" % pid
                open(PIDFILE,'w').write("%d"%pid)
                sys.exit(0)
        except OSError, e:
            print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
            sys.exit(1)

        (pw_name,pw_passwd,pw_uid, pw_gid,pw_gecos,pw_dir,pw_shell) =\
            pwd.getpwnam('nwuserver')
        os.setegid(pw_gid)
        os.seteuid(pw_uid)

def main():
    config = read_config()
    host = config['host']
    port = config['port']
    log.info("Starting nwu-server. Listening at " + host + ":" + str(port) +\
        ".")

    create_tables()

    nadmin = nwu_admin()

    ssl = sslxmlrpc.SSLServer('/etc/nwu/server.pem')
    server = ssl.start_server(host, port)

    server.register_function(apt.apt_set_repositories)
    server.register_function(apt.apt_set_current_packages_full)
    server.register_function(session_setup)
    server.register_function(apt.apt_set_list_diff)
    server.register_function(get_tasks)
    server.register_function(wipe_tasks)
    server.register_function(add_computer)
    server.register_function(nadmin.get_info)
    server.register_function(nadmin.computer_del)

    if DAEMONIZE == 1:
        log.info("Daemonizing.")
        daemonize()

    server.serve_forever()

if __name__ == '__main__':
    try:
        sys.exit (main ())
    except KeyboardInterrupt:
        sys.exit (0)
