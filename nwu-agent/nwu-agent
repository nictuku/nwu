#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 Yves Junqueira (yves@cetico.org)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import sys

if os.geteuid() == 0:
    print "Error: nwu-agent should not be run as root."
    sys.exit(1)

from nwu_agent import misc as agent

current_packages = agent.get_current_packages()
sourcefiles = agent.list_sources_list()
repositories = agent.read_sources_list(sourcefiles)
update_candidates = agent.get_apt_update_candidates()
(uniq, password) = agent.get_auth()
token = agent.hmac.new(password, uniq).hexdigest()
uname = os.uname()
os_name = uname[0]
myhost = uname[1] # Alternative: socket.gethostname()
os_version = uname[2]

print "Hey, this is me:", uniq, myhost, os_name, os_version
print "Setting up initial session."

my_session = agent.rpc.session_setup(uniq, token)

if not my_session:
    print "Oops. The server does not know me."
    add_me = agent.rpc.add_machine(password, uniq, myhost, os_name, os_version)

    if add_me:
        print "Machine account created on the server."
    else:
        print "Server did not create the account."
        raise Exception, "Failed to create machine account in the server."

    my_session = agent.rpc.session_setup(uniq, token)
    
print "Sending repositories data"
rep = agent.rpc.apt_set_repositories(my_session,repositories)

if len(update_candidates) > 0:
    # FIXME: update_candidates returns an empty string when blank.
    # Should be a dict.
    print "Sending update candidates.",update_candidates
else:
    print "No pending updates - informing the server."

rep = agent.rpc.apt_set_upgrade_candidates_diff(my_session,update_candidates, {})

print "Getting assigned tasks."
get_tasks = agent.rpc.get_tasks(my_session)

print "Tasks:", get_tasks
print "Kindly asking server to wipe tasks."
result = agent.rpc.wipe_tasks(my_session)

store_task = []

for tas in get_tasks:
   store_task.append(tas)

if len(store_task) > 0:
    print "Storing tasks in spool"
    agent.store_spool(store_task)
        
print "Sending current packages list."
rep = agent.rpc.apt_set_current_packages_full(my_session, current_packages)

