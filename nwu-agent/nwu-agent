#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 Yves Junqueira (yves@cetico.org)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import sys
import logging
import logging.handlers

log = logging.getLogger()

hdlr = logging.handlers.SysLogHandler(
  "/dev/log",facility=logging.handlers.SysLogHandler.LOG_USER)

formatter = logging.Formatter(
"nwu_agent[%(process)d] %(levelname)s %(message)s"
    )
hdlr.setFormatter(formatter)
log.addHandler(hdlr)
log.setLevel(logging.INFO)


if os.geteuid() == 0:
    log.error("nwu-agent cannot be run as root.")
    sys.exit(1)

log.info("Starting nwu-agent")
# FIXME: sysinfo should not generate output here
from nwu_agent import misc as agent
[cached_pkgs, current_pkgs, diff_pkgs] = agent.diff_new_spool('pkgs')

# Format the current packages list ready to store in spool
pkgs_list = []
for key, val in current_pkgs.iteritems():
    pkgs_list.append(['cur_pkgs', key, val])
    
[cached_candidates, current_candidates, diff_candidates] \
    = agent.diff_new_spool('update_candidates')
# Format the update candidates list ready to store in spool
candidates_list = []
for key, val in current_candidates.iteritems():
    candidates_list.append(['cur_candidates', key, val])
 
#print "diff candidates:", diff_candidates

sourcefiles = agent.list_sources_list()
repositories = agent.read_sources_list(sourcefiles)
#update_candidates = agent.get_current('update_candidates')

(uniq, password) = agent.get_auth()
token = agent.hmac.new(password, uniq).hexdigest()
uname = os.uname()
os_name = uname[0]
myhost = uname[1] # Alternative: socket.gethostname()
os_version = uname[2]

log.info("Machine identification: " + uniq + " " + myhost + ".")
log.info("Setting up initial session.")
my_session = agent.rpc.session_setup(uniq, token)

if not my_session:
    log.info("Oops. The server does not know me.")
    add_me = agent.rpc.add_computer(password, uniq, myhost, os_name, os_version)

    if add_me:
        log.info("Machine account created on the server.")
    else:
        log.error("Server did not create the account.")
        raise Exception, "Failed to create computer account in the server."

    my_session = agent.rpc.session_setup(uniq, token)
    
log.info("Sending repositories data.")
rep = agent.rpc.apt_set_repositories(my_session,repositories)


log.info("Getting assigned tasks.")
get_tasks = agent.rpc.get_tasks(my_session)

log.info("Assigned tasks found: " + str(get_tasks) + ".")

log.debug("Kindly asking server to wipe old tasks.")
result = agent.rpc.wipe_tasks(my_session)

store_task = []

for tas in get_tasks:
   store_task.append(tas)

if len(store_task) > 0:
    log.debug("Storing tasks in spool.")
    agent.store_spool('tasks', store_task)

log.info("Sending update candidates list.")

rep = agent.rpc.apt_set_list_diff(my_session, 'apt_update_candidates', 
    diff_candidates[0], diff_candidates[1])

# FIXME: store candidates cache only if server confirms receipt
if len(diff_candidates[0]) > 0 or len(diff_candidates[1]) > 0:
    log.info("Storing spool for update_candidates.")
    agent.store_spool('update_candidates', candidates_list, True)
        
log.info("Sending current packages list.")
rep = agent.rpc.apt_set_list_diff(my_session, 'apt_current_packages', 
    diff_pkgs[0], diff_pkgs[1])

# FIXME: store pkg cache only if server confirms receipt
if len(diff_pkgs[0]) > 0 or len(diff_pkgs[1]) > 0:
    log.info("Storing spool for current package list.")

    agent.store_spool('pkgs', pkgs_list, True)
