#!/usr/bin/python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 Yves Junqueira (yves@cetico.org)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import os
import fcntl
import sys
import logging
import logging.handlers
import hmac
from nwu_agent.node_info import NodeInfo
from nwu_agent.node_sync import NodeSync

log = logging.getLogger()
hdlr = logging.handlers.SysLogHandler(
  "/dev/log",facility=logging.handlers.SysLogHandler.LOG_USER)
formatter = logging.Formatter(
    "nwu_agent[%(process)d] %(levelname)s %(message)s"
    )
hdlr.setFormatter(formatter)
log.addHandler(hdlr)
log.setLevel(logging.DEBUG)

def lock_nwu():
    """Enforce single execution
    This implements a lock to make sure this program
    will only run one instance at a time.
    """
    log.debug("Acquiring lock")
    lock =  fcntl.LOCK_EX | fcntl.LOCK_NB
    filename = '/tmp/.nwu-lock'
    for retry in (1, 0):
        try:
            lock_fd = open(filename, 'a')
            break
        except OSError, val:    # No such file or directory?
            if not retry or os.path.exists(filename):
                raise
            # Ensure filename exists.
            open(filename, 'w').close()
    try:
        fcntl.lockf(lock_fd, lock)
    except IOError:
        log.fatal("Error obtaining exclusive lock.")
        sys.exit(1)
    else:
        log.debug("Lock acquired successfully")

def main():
    if os.geteuid() == 0:
        print >>sys.stderr, "You may not run nwu-agent as root"
        log.error("nwu-agent cannot be run as root.")
        sys.exit(1)
    log.info("Starting nwu-agent")
    lock_nwu()
    # FIXME: sysinfo should not generate output here
    info = NodeInfo()
    sync = NodeSync(info)
    sync.sync_all()

if __name__ == '__main__':
    main()
